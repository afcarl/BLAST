function y = imatshCompiler2(fnames, mediaRoot, origfname, shingleLen, beta, mixx)
# y = imatshCompiler(fnames, mediaRoot, origTrackName, shingleLen, [beta=2.0, mix=0])
# read imatshTrackDescriptions compile matshup
#
#inputs:
# fnames - track description filenames
# mediaRoot - root directory for media files
# origTrackName - the target track [wav]
# shingleLen - length of shingles in frames [22]
# beta -source mix probability parameter [2.0]
# mixx - amount of original audio mix [0.5]
#
# Track descriptions are files of space-separated 4-tuples "d t o n\n"
#
# d: Euclidean distance
# t: imatchup time index (hop size units [1024])
# o: media time index (hop size units [1024])
# n: name of media file
#
# output:
#  wavefile of matshup
#
# Copyright (C) Michael A. Casey 2009
# Dartmouth College, All Rights Reserved

# Time parameters

if (nargin<6), mixx = 0.5;end # Original audio mix
if (nargin<5), beta = 2.0;end # Source mix probability parameter
if (nargin<4), shingleLen=22;end # Length of match segments

hop=1024; % hop size of feature frames (sub-shingle hop)
framesz = hop; % length of feature frames (sub-shingle length)

# check original media
if(~exist(origfname))
  error("You really ought to have the original file be visible");
end



if(~iscell(fnames))
  error("fnames really ought to be a cell array");
end

numFiles=length(fnames);
Dists=[];Times=[];Offsets=[];Names={};
for file = 1:numFiles
				# Read file description into arrays
  [d,t,o,n] = textread(fnames{file}, "%f %d %d %s");
  #idx = find(t); # Always ignore time 0
  idx = 1:length(t);
  if(~isempty(idx))
    Dists = [Dists;d(idx)];
    Times = [Times;t(idx)];
    Offsets = [Offsets;o(idx)];
    Names = [Names;n(idx)'];
  end
endfor

printf("Reading %s...", origfname);
fflush(1);
[originalAudio,sr] = wavread(origfname);

[nr,nc] = size(originalAudio);
if( nc > 1 )
  printf("Mono...");
  fflush(1);
  originalAudio = sum(originalAudio')' ./ sqrt(nc);
endif
printf("done.\n");
fflush(1);
printf("Allocating output...");
fflush(1);
y = zeros(size(originalAudio));
printf("done.\n");
fflush(1);
# main compiler function
# for each target time index
T = max(Times);
probNorm = max( exp ( -beta * Dists) );
for t = unique(Times')
				# Find all distances for current time index
  t_idx = find(Times==t);
  if(~isempty(t_idx))
    d = Dists(t_idx);
    o = Offsets(t_idx);    
				# Make probability distribution
    probs = exp( -beta * d ) ./ sum( exp( -beta * d) );
				# Get media at offset
    printf("t:%d ", t);
    fflush(1);
    currentSegmentIndex = [t*framesz+1:min((t+shingleLen)*framesz,length(y))];
    z = originalAudio(currentSegmentIndex);
    for k=1:length(t_idx)
      printf("%f ", probs(k));
      fflush(1);
      thisfname = [mediaRoot filesep Names{t_idx(k)}];
				# FIXME: need some cross-fade logic here
      if(exist(thisfname))
	x = wavread(thisfname, [o(k)*framesz+1 o(k)*framesz+length(currentSegmentIndex)]);
	[nr,nc] = size(x);
	if( nc > 1 )
	  x = sum(x')' ./ sqrt(nc);
	endif
	rmsOrig = sqrt(mean(z.^2));
	rmsThis = sqrt(mean(x.^2));
	if(rmsThis>eps)
	  amp = rmsOrig/rmsThis;
	else
	  amp = 0.0;
	endif
	if(length(x)<length(currentSegmentIndex))
	  x = [x;zeros(length(currentSegmentIndex)-nr,1)];
	endif
	y(currentSegmentIndex) = y(currentSegmentIndex) + amp*probs(k)*x;
	clear x;
      else
	fprintf("CANNOT FIND WAVFILE: %s\n", thisfname);
	error("wav file not found");
      endif
    endfor
    printf("\n");
  endif
endfor
printf("Post-compile mixing...");
fflush(1);
outFileName = [fnames{1} '.wav'];
printf("Writing %s...", outFileName);
fflush(1);
wavwrite([(1-mixx)*y mixx*originalAudio], sr, 16, outFileName);
printf("done.\n");
